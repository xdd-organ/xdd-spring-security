<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<!-- spring-security框架的核心配置 -->
	<security:http pattern="/demo/test1" security="none" />
	<security:http pattern="/login.jsp" security="none" />

	<security:http use-expressions="true" entry-point-ref="myAuthenticationEntryPoint">
		<security:access-denied-handler error-page="/demo/to500" />
		<!-- 使用自定義的登陸，需要注释该标签 security:form-login -->
		<security:custom-filter ref="usernameAndPassword" position="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />

		<!-- 定义记住我功能，通过user-service-ref指定将要使用的UserDetailsService-->
		<security:remember-me key="e37f8888-0ooo-22dd-bd0b-9900211c9a66" />

		<security:logout logout-url="/logout" invalidate-session="true" logout-success-url="/demo/logout" />

		<security:session-management invalid-session-url="/demo/toLogin" session-authentication-error-url="/demo/login" session-fixation-protection="newSession">
			<security:concurrency-control max-sessions="2" error-if-maximum-exceeded="true" expired-url="/demo/toLogin" />
		</security:session-management>
	</security:http>

	<!-- 未登录的切入点 -->
	<!-- 需要有个切入点 -->
	<bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg index="0" value="/login.jsp"/>
	</bean>

	<bean id="usernameAndPassword" class="com.java.xdd.springsecurity.filter.MyAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager"/>

	</bean>

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<!--<bean id="myFilterSecurityInterceptor" class="com.java.xdd.springsecurity.filter.MyFilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="myAccessDecisionManager" />
		&lt;!&ndash;<property name="securityMetadataSource" ref="securityMetadataSource" />&ndash;&gt;
	</bean>-->

	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="myAccessDecisionManager"  class="com.java.xdd.springsecurity.filter.MyAccessDecisionManager" />
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<bean id="securityMetadataSource" class="com.java.xdd.springsecurity.filter.MySecurityMetadataSource" />

























	<!-- 后台管理权限认证 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="loginAuthProvider">
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="loginAuthProvider" class="com.java.xdd.springsecurity.provider.LoginAsAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService"/>
		<property name="passwordEncoder" >
			<bean class="org.springframework.security.authentication.encoding.PlaintextPasswordEncoder">
				<!--  <property name="encodeHashAsBase64" value="false" />   -->
			</bean>
		</property>
		<!-- <property name="saltSource">
        通过动态的加密盐进行加密，该配置通过用户名提供加密盐, 通过UserDetails的getUsername()方式
          <bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
            <property name="userPropertyToUse" value="getUsername" />
         </bean>
   		 </property>    -->
	</bean>

	<!-- 处理登录成功的请求
		defaultTargetUrl 默认目标页面
		alwaysUseDefaultTargetUrl 总是使用默认目标页面
	-->
	<bean id="successHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/demo/success" />
		<property name="alwaysUseDefaultTargetUrl" value="false" />
	</bean>

	<!-- 	处理登录失败的请求
			defaultFailureUrl 默认登录失败跳转目标页面
	-->
	<bean id="failureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/demo/failure" />
	</bean>

	<!-- 定义权限、资源关系 -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="rejectPublicInvocations" value="false" />
		<!-- 用户拥有的权限 -->
		<property name="authenticationManager" ref="authenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<!-- 资源与权限对应关系 -->
		<property name="securityMetadataSource" ref="adminSecurityMetadataSource" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg index="0">
			<list>
				<bean class="com.java.xdd.springsecurity.voter.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

</beans>